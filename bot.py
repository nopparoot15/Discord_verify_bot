import os
import re
import io
import unicodedata
import asyncio
import discord
from typing import Optional
from discord.ext import commands
from datetime import datetime, timezone, timedelta

# ====== CONFIGURATION ======
VERIFY_CHANNEL_ID = 1402889712888447037
APPROVAL_CHANNEL_ID = 1402889786712395859
LOG_CHANNEL_ID = 1418941833819590699
ADMIN_NOTIFY_CHANNEL_ID = 1418941833819590699  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πâ ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏µ‡∏Å‡∏´‡πâ‡∏≠‡∏á

ROLE_ID_TO_GIVE = 1321268883088211981
ROLE_MALE = 1321268883025559689
ROLE_FEMALE = 1321268883025559688
ROLE_LGBT = 1321268883025559687
ROLE_GENDER_UNDISCLOSED = 1419046348023398421

# --- Age roles ---
ROLE_0_12   = 1402907371696558131
ROLE_13_15  = 1344232758129594379
ROLE_16_18  = 1344232891093090377
ROLE_19_21  = 1344232979647565924
ROLE_22_24  = 1344233048593403955
ROLE_25_29  = 1418703710137094357
ROLE_30_34  = 1418703702843457576
ROLE_35_39  = 1418703707100545075
ROLE_40_44  = 1418703944711929917
ROLE_45_49  = 1418703955176718396
ROLE_50_54  = 1418704062592843948
ROLE_55_59  = 1418704067194261615
ROLE_60_64  = 1418704072617496666
ROLE_65_UP  = 1418704076119736390
ROLE_AGE_UNDISCLOSED = 1419045340576747663

APPEND_FORM_NAME_TO_NICK = True

# ====== AUTO REFRESH CONFIG (‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ) ======
AUTO_REFRESH_ENABLED = True
REFRESH_TZ = timezone(timedelta(hours=7))  # Asia/Bangkok
REFRESH_FREQUENCY = "YEARLY"               # "YEARLY" | "MONTHLY" | "WEEKLY" | "DAILY"
REFRESH_AT_HOUR = 6
REFRESH_AT_MINUTE = 0
REFRESH_AT_DAY = 1                         # ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö MONTHLY/YEARLY
REFRESH_AT_MONTH = 1                       # ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö YEARLY (1=‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°)
REFRESH_AT_WEEKDAY = 0                     # ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö WEEKLY (0=Mon .. 6=Sun)

# ====== Account risk (age only) ======
ACCOUNT_RISK_ENABLED = True
MIN_ACCOUNT_AGE_DAYS_HIGH = 3    # < 3 ‡∏ß‡∏±‡∏ô = HIGH
MIN_ACCOUNT_AGE_DAYS_MED  = 7    # < 7 ‡∏ß‡∏±‡∏ô = MED (‡πÅ‡∏•‡∏∞ >= 3)

# ====== DISCORD BOT SETUP ======
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True

bot = commands.Bot(command_prefix="$", intents=intents)
pending_verifications = set()

INVALID_CHARS = set("=+*/@#$%^&*()<>?|{}[]\"'\\~`")

EMOJI_RE = re.compile(
    r"["
    r"\U0001F300-\U0001F5FF"
    r"\U0001F600-\U0001F64F"
    r"\U0001F680-\U0001F6FF"
    r"\U0001F700-\U0001F77F"
    r"\U0001F780-\U0001F7FF"
    r"\U0001F900-\U0001F9FF"
    r"\U0001FA00-\U0001FA6F"
    r"\U0001FA70-\U0001FAFF"
    r"\u2600-\u26FF"
    r"\u2700-\u27BF"
    r"]"
    r"|[\u200d\uFE0F]"
    r"|[\U0001F1E6-\U0001F1FF]{2}"
)
def contains_emoji(s: str) -> bool:
    return bool(EMOJI_RE.search(s or ""))

# ====== Admin notifications ======
async def notify_admin(guild: discord.Guild, text: str):
    try:
        ch = guild.get_channel(ADMIN_NOTIFY_CHANNEL_ID) or guild.get_channel(APPROVAL_CHANNEL_ID)
        if ch:
            await ch.send(f"üîî **Admin Notice:** {text}")
    except Exception:
        pass

# ====== Nickname canonicalizer & same-name block ======
_ZERO_WIDTH_RE = re.compile(r"[\u200B-\u200F\u202A-\u202E\u2060-\u206F\uFEFF]")
_CONFUSABLES_MAP = str.maketrans({
    # Cyrillic -> Latin
    "–ê":"A","–í":"B","–ï":"E","–ö":"K","–ú":"M","–ù":"H","–û":"O","–†":"P","–°":"S","–¢":"T","–£":"Y","–•":"X",
    "–∞":"a","–≤":"b","–µ":"e","–∫":"k","–º":"m","–Ω":"h","–æ":"o","—Ä":"p","—Å":"c","—Ç":"t","—É":"y","—Ö":"x",
    # Greek -> Latin
    "Œë":"A","Œí":"B","Œï":"E","Œñ":"Z","Œó":"H","Œô":"I","Œö":"K","Œú":"M","Œù":"N","Œü":"O","Œ°":"P","Œ§":"T","Œ•":"Y","Œß":"X",
    "Œ±":"a","Œ≤":"b","Œµ":"e","Œπ":"i","Œ∫":"k","ŒΩ":"n","Œø":"o","œÅ":"p","œÑ":"t","œÖ":"y","œá":"x",
})
_LEET_MAP = str.maketrans({
    "0":"o","1":"l","3":"e","4":"a","5":"s","7":"t","8":"b","9":"g","2":"z","6":"g",
    "@":"a","$":"s","+":"t"
})
def _strip_combining(s: str) -> str:
    return "".join(ch for ch in s if unicodedata.category(ch) != "Mn")
def _letters_only(s: str) -> str:
    return "".join(ch for ch in s if unicodedata.category(ch).startswith("L"))
def _collapse_runs(s: str) -> str:
    if not s: return s
    out=[s[0]]
    for ch in s[1:]:
        if ch!=out[-1]: out.append(ch)
    return "".join(out)
def _canon_full(s: str) -> str:
    if not s: return ""
    s = unicodedata.normalize("NFKC", s)
    s = _ZERO_WIDTH_RE.sub("", s)
    s = EMOJI_RE.sub("", s)
    s = s.translate(_CONFUSABLES_MAP)
    s = s.translate(_LEET_MAP)
    s = unicodedata.normalize("NFKD", s)
    s = _strip_combining(s)
    s = _letters_only(s)
    s = s.casefold()
    s = _collapse_runs(s)
    return s
def _base_display_name(member: discord.Member | discord.User) -> str:
    base = (
        getattr(member, "nick", None)
        or getattr(member, "global_name", None)
        or getattr(member, "display_name", None)
        or getattr(member, "name", None)
        or ""
    ).strip()
    # ‡∏•‡∏ö‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    return re.sub(r"\s*\(.*?\)\s*$", "", base).strip()
def _discord_names_set(member: discord.Member | discord.User) -> set[str]:
    names = filter(None, {
        getattr(member, "nick", ""),
        getattr(member, "global_name", ""),
        getattr(member, "display_name", ""),
        getattr(member, "name", ""),
        _base_display_name(member),
    })
    return {_canon_full(x) for x in names if x}

# ====== Gender Normalizer & Aliases ======
def _norm_gender(s: str) -> str:
    s = (s or "").strip().lower()
    s = re.sub(r'[\s\.\-_\/\\]+', '', s)
    return s

_MALE_ALIASES_RAW = {
    "‡∏ä", "‡∏ä‡∏≤", "‡∏ä‡∏≤‡∏¢", "‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢", "‡πÄ‡∏û‡∏®‡∏ä‡∏≤‡∏¢", "‡∏ú‡∏ä", "‡∏ä‡∏≤‡∏¢‡πÅ‡∏ó‡πâ", "‡∏´‡∏ô‡∏∏‡πà‡∏°",
    "male", "man", "boy", "m", "masculine", "he", "him",
    "Áî∑", "Áî∑ÊÄß", "Áî∑Áîü", "Áî∑‰∫∫",
    "Áî∑", "Áî∑ÊÄß", "„Åä„Å®„Åì", "„Å†„Çì„Åõ„ÅÑ",
    "ÎÇ®", "ÎÇ®Ïûê", "ÎÇ®ÏÑ±",
    "nam", "ƒë√†n √¥ng", "dan ong", "con trai", "nam gi·ªõi", "namgioi",
    "pria", "laki", "laki-laki", "lelaki", "cowok",
    "lalaki",
    "‡§™‡•Å‡§∞‡•Å‡§∑", "aadmi", "ladka", "‡§™‡•Å‡§∞‡•Ç‡§∑", "mard", "‡§Ü‡§¶‡§Æ‡•Ä", "ŸÖÿ±ÿØ",
    "ÿ∞ŸÉÿ±", "‡§∞ÿ¨ŸÑ", "ÿµÿ®Ÿä",
    "erkek", "bay",
    "–º—É–∂—á–∏–Ω–∞", "–ø–∞—Ä–µ–Ω—å", "–º–∞–ª—å—á–∏–∫", "—á–æ–ª–æ–≤—ñ–∫", "—Ö–ª–æ–ø–µ—Ü—å",
    "hombre", "masculino", "chico", "varon", "var√≥n",
    "homem", "rapaz",
    "homme", "masculin", "gar√ßon",
    "mann", "m√§nnlich", "junge",
    "uomo", "maschio", "ragazzo",
    "mezczyzna", "mƒô≈ºczyzna", "chlopak", "ch≈Çopak",
    "mu≈æ", "chlapec",
    "andras", "Œ¨ŒΩŒ¥œÅŒ±œÇ", "arseniko", "Œ±œÅœÉŒµŒΩŒπŒ∫œå", "agori", "Œ±Œ≥œåœÅŒπ",
    "‡∫ú‡∫π‡ªâ‡∫ä‡∫≤‡∫ç", "·ûî·üí·ûö·ûª·ûü", "·ûî·ûª·ûö·ûü", "·Äö·Ä±·Ä¨·ÄÄ·Ä∫·Äª·Ä¨·Ä∏", "·Ä°·Äô·Äª·Ä≠·ÄØ·Ä∏·Äû·Ä¨·Ä∏",
}
_FEMALE_ALIASES_RAW = {
    "‡∏´", "‡∏´‡∏ç", "‡∏´‡∏ç‡∏¥", "‡∏´‡∏ç‡∏¥‡∏á", "‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á", "‡πÄ‡∏û‡∏®‡∏´‡∏ç‡∏¥‡∏á", "‡∏ú‡∏ç", "‡∏™‡∏≤‡∏ß", "‡∏ç",
    "female", "woman", "girl", "f", "feminine", "she", "her",
    "Â•≥", "Â•≥ÊÄß", "Â•≥Áîü", "Â•≥‰∫∫",
    "Â•≥", "Â•≥ÊÄß", "„Åä„Çì„Å™", "„Åò„Çá„Åõ„ÅÑ",
    "Ïó¨", "Ïó¨Ïûê", "Ïó¨ÏÑ±",
    "n·ªØ", "ph·ª• n·ªØ", "con g√°i",
    "wanita", "perempuan", "cewek",
    "babae", "dalaga",
    "‡§Æ‡§π‡§ø‡§≤‡§æ", "‡§î‡§∞‡§§", "‡§≤‡§°‡§º‡§ï‡•Ä", "ladki", "aurat", "ÿπŸàÿ±ÿ™", "‡∏Ç–∞—ÇŸàŸÜ",
    "ÿ£ŸÜÿ´Ÿâ", "ÿßŸÖÿ±ÿ£ÿ©", "ÿ®ŸÜÿ™", "ŸÅÿ™ÿßÿ©",
    "kadƒ±n", "bayan", "kƒ±z",
    "–∂–µ–Ω—â–∏–Ω–∞", "–¥–µ–≤—É—à–∫–∞", "–¥–µ–≤–æ—á–∫–∞", "–∂—ñ–Ω–∫–∞", "–¥—ñ–≤—á–∏–Ω–∞",
    "mujer", "femenino", "chica",
    "mulher", "feminina", "menina",
    "femme", "f√©minin", "fille",
    "frau", "weiblich", "m√§dchen",
    "donna", "femmina", "ragazza",
    "kobieta", "dziewczyna", "zenska", "≈ºe≈Ñska",
    "≈æena", "d√≠vka",
    "gynaika", "Œ≥œÖŒΩŒ±ŒØŒ∫Œ±", "thyliko", "Œ∏Œ∑ŒªœÖŒ∫œå", "koritsi", "Œ∫ŒøœÅŒØœÑœÉŒπ",
    "‡∫ú‡∫π‡ªâ‡∫ç‡∫¥‡∫á", "·ûü·üí·ûö·û∏", "·ûì·û∂·ûö·û∏", "·Äô·Ä≠·Äî·Ä∫·Ä∏·Äô", "·Ä°·Äô·Äª·Ä≠·ÄØ·Ä∏·Äû·Äô·ÄÆ·Ä∏",
}
_LGBT_ALIASES_RAW = {
    "lgbt", "lgbtq", "lgbtq+",
    "nonbinary", "non-binary", "nb", "enby",
    "trans", "transgender",
    "genderqueer", "bigender", "agender", "genderfluid",
    "queer", "other",
    "‡πÄ‡∏û‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", "‡∏™‡∏≤‡∏ß‡∏™‡∏≠‡∏á", "‡∏™‡∏≤‡∏ß‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≠‡∏á", "‡∏ó‡∏≠‡∏°", "‡∏î‡∏µ‡πâ", "‡πÑ‡∏ö",
    "Èùû‰∫åÂÖÉ", "Ë∑®ÊÄßÂà´", "ÈÖ∑ÂÑø",
    "„Éé„É≥„Éê„Ç§„Éä„É™„Éº", "x„Ç∏„Çß„É≥„ÉÄ„Éº", "„Éà„É©„É≥„Çπ", "„ÇØ„Ç£„Ç¢",
    "ÎÖºÎ∞îÏù¥ÎÑàÎ¶¨", "Ìä∏ÎûúÏä§", "ÌÄ¥Ïñ¥",
}
_GENDER_UNDISCLOSED_ALIASES_RAW = {
    "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏û‡∏®", "‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢", "‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å", "‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏Å‡∏£‡∏≠‡∏Å", "‡πÑ‡∏°‡πà‡∏ö‡∏≠‡∏Å",
    "prefer not to say", "prefer-not-to-say", "undisclosed", "unspecified", "unknown", "private", "secret",
    "n/a", "na", "none", "‚Äî", "-"
}

MALE_ALIASES   = {_norm_gender(x) for x in _MALE_ALIASES_RAW}
FEMALE_ALIASES = {_norm_gender(x) for x in _FEMALE_ALIASES_RAW}
LGBT_ALIASES   = {_norm_gender(x) for x in _LGBT_ALIASES_RAW}
GENDER_UNDISCLOSED_ALIASES = {_norm_gender(x) for x in _GENDER_UNDISCLOSED_ALIASES_RAW}

MALE_PREFIXES   = {_norm_gender(x) for x in ["‡∏ä", "‡∏ä‡∏≤", "‡∏ä‡∏≤‡∏¢", "‡∏ú‡∏π‡πâ‡∏ä", "‡πÄ‡∏û‡∏®‡∏ä", "m", "ma", "masc", "man", "Áî∑", "„Åä„Å®„Åì", "„Å†„Çì", "ÎÇ®"]}
FEMALE_PREFIXES = {_norm_gender(x) for x in ["‡∏´", "‡∏´‡∏ç", "‡∏´‡∏ç‡∏¥", "‡∏´‡∏ç‡∏¥‡∏á", "‡∏ú‡∏π‡πâ‡∏´", "‡πÄ‡∏û‡∏®‡∏´", "f", "fe", "fem", "woman", "wo", "Â•≥", "„Åä„Çì„Å™", "„Åò„Çá", "Ïó¨"]}

# ====== Age "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏" ======
def _norm_simple(s: str) -> str:
    return re.sub(r'[\s\.\-_\/\\]+', '', (s or '').strip().lower())
_AGE_UNDISCLOSED_ALIASES_RAW = {
    "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏","‡πÑ‡∏°‡πà‡∏ö‡∏≠‡∏Å","‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢","‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢","‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏Å‡∏£‡∏≠‡∏Å","‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å","‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏","‡∏õ‡∏Å‡∏õ‡∏¥‡∏î",
    "prefer not to say","prefer-not-to-say","undisclosed","unspecified","unknown","private","secret",
    "n/a","na","none","x","-","‚Äî"
}
AGE_UNDISCLOSED_ALIASES = {_norm_simple(x) for x in _AGE_UNDISCLOSED_ALIASES_RAW}
def is_age_undisclosed(text: str) -> bool:
    t = _norm_simple(text)
    return (t == "") or (t in AGE_UNDISCLOSED_ALIASES)  # ‡∏ß‡πà‡∏≤‡∏á = ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏

def resolve_gender_role_id(text: str) -> int:
    t = _norm_gender(text)
    if t in MALE_ALIASES or any(t.startswith(p) for p in MALE_PREFIXES):
        return ROLE_MALE
    if t in FEMALE_ALIASES or any(t.startswith(p) for p in FEMALE_PREFIXES):
        return ROLE_FEMALE
    if t in GENDER_UNDISCLOSED_ALIASES:
        return ROLE_GENDER_UNDISCLOSED
    if t in LGBT_ALIASES:
        return ROLE_LGBT
    return ROLE_GENDER_UNDISCLOSED  # ‡∏Ñ‡πà‡∏≤‡∏≠‡∏∑‡πà‡∏ô/‡∏ß‡πà‡∏≤‡∏á ‚Üí ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏û‡∏®

def resolve_age_role_id(age_text: str) -> int | None:
    if is_age_undisclosed(age_text):
        return ROLE_AGE_UNDISCLOSED
    try:
        age = int((age_text or "").strip())
    except ValueError:
        return None
    slots = [
        ((0, 12), ROLE_0_12),
        ((13, 15), ROLE_13_15),
        ((16, 18), ROLE_16_18),
        ((19, 21), ROLE_19_21),
        ((22, 24), ROLE_22_24),
        ((25, 29), ROLE_25_29),
        ((30, 34), ROLE_30_34),
        ((35, 39), ROLE_35_39),
        ((40, 44), ROLE_40_44),
        ((45, 49), ROLE_45_49),
        ((50, 54), ROLE_50_54),
        ((55, 59), ROLE_55_59),
        ((60, 64), ROLE_60_64),
        ((65, 200), ROLE_65_UP),
    ]
    for (lo, hi), rid in slots:
        if lo <= age <= hi and rid > 0:
            return rid
    return None

# ====== Helpers ======
async def build_avatar_attachment(user: discord.User):
    try:
        try:
            asset = user.display_avatar.with_format("webp").with_size(512)
            data = await asset.read()
            filename = f"avatar_{user.id}.webp"
        except Exception:
            asset = user.display_avatar.with_static_format("png").with_size(512)
            data = await asset.read()
            filename = f"avatar_{user.id}.png"
        f = discord.File(io.BytesIO(data), filename=filename)
        return f, filename
    except Exception:
        return None, None

def copy_embed_fields(src: discord.Embed) -> discord.Embed:
    e = discord.Embed()
    if src.title:
        e.title = src.title
    if src.description:
        e.description = src.description
    if getattr(src, "color", None) is not None:
        e.color = src.color
    if getattr(src, "author", None):
        name = getattr(src.author, "name", None)
        icon = getattr(src.author, "icon_url", None)
        url = getattr(src.author, "url", None)
        if name or icon or url:
            e.set_author(name=name or None, icon_url=icon or None, url=url or None)
    if getattr(src, "footer", None):
        text = getattr(src.footer, "text", None)
        icon = getattr(src.footer, "icon_url", None)
        if text or icon:
            e.set_footer(text=text or None, icon_url=icon or None)
    if src.image and src.image.url:
        e.set_image(url=src.image.url)
    if src.thumbnail and src.thumbnail.url:   # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ
        e.set_thumbnail(url=src.thumbnail.url)
    for f in src.fields:
        e.add_field(name=f.name, value=f.value, inline=f.inline)
    return e

def build_parenthesized_nick(member: discord.Member, form_name: str) -> str:
    base = (
        member.nick
        or getattr(member, "global_name", None)
        or member.display_name
        or member.name
        or ""
    ).strip()
    base = re.sub(r"\s*\(.*?\)\s*$", "", base).strip()
    real = (form_name or "").strip()
    candidate = f"{base} ({real})".strip()
    if len(candidate) <= 32:
        return candidate
    max_base = 32 - (len(real) + 3)
    if max_base > 1:
        candidate = f"{base[:max_base].rstrip()} ({real})"
        if len(candidate) <= 32:
            return candidate
    return real[:32]

# ---------- Role sets ----------
GENDER_ROLE_IDS_ALL = [ROLE_MALE, ROLE_FEMALE, ROLE_LGBT, ROLE_GENDER_UNDISCLOSED]
AGE_ROLE_IDS_ALL = [rid for rid in [
    ROLE_0_12, ROLE_13_15, ROLE_16_18, ROLE_19_21, ROLE_22_24,
    ROLE_25_29, ROLE_30_34, ROLE_35_39, ROLE_40_44, ROLE_45_49,
    ROLE_50_54, ROLE_55_59, ROLE_60_64, ROLE_65_UP, ROLE_AGE_UNDISCLOSED
] if rid and rid > 0]

# ---------- Utils for refresh ----------
def _find_embed_field(embed: discord.Embed, *keys: str) -> str | None:
    keys = [k.lower() for k in keys]
    for f in embed.fields:
        name = (f.name or "").lower()
        if any(k in name for k in keys):
            return f.value
    return None

def _parse_sent_at(s: str) -> datetime | None:
    try:
        dt = datetime.strptime(s.strip(), "%d/%m/%Y %H:%M")
        return dt.replace(tzinfo=timezone(timedelta(hours=7)))
    except Exception:
        return None

def _years_between(a: datetime, b: datetime) -> int:
    years = b.year - a.year
    if (b.month, b.day) < (a.month, a.day):
        years -= 1
    return max(years, 0)

async def _latest_verification_embed_for(member: discord.Member) -> discord.Embed | None:
    channel = member.guild.get_channel(APPROVAL_CHANNEL_ID)
    if not channel:
        return None
    async for msg in channel.history(limit=500):
        if msg.author == bot.user and msg.embeds and member in msg.mentions:
            return msg.embeds[0]
    return None

async def _build_latest_verification_index(guild: discord.Guild, limit: int = 2000):
    channel = guild.get_channel(APPROVAL_CHANNEL_ID)
    if not channel:
        return {}
    index = {}
    async for msg in channel.history(limit=limit):
        if msg.author != bot.user or not msg.embeds or not msg.mentions:
            continue
        u = msg.mentions[0]
        if u is None:
            continue
        if u.id not in index:
            index[u.id] = (msg.embeds[0], msg.created_at)
    return index

async def _log_chunks(channel: discord.TextChannel, header: str, lines: list[str], chunk_size: int = 1900):
    if not lines:
        await channel.send(header)
        return
    buf = header + "\n"
    for line in lines:
        if len(buf) + len(line) + 1 > chunk_size:
            await channel.send(buf.rstrip())
            buf = ""
        buf += line + "\n"
    if buf.strip():
        await channel.send(buf.rstrip())

async def _run_full_age_refresh(guild: discord.Guild):
    tz = timezone(timedelta(hours=7))
    now = datetime.now(tz)
    log_ch = guild.get_channel(LOG_CHANNEL_ID)
    if not log_ch:
        return

    index = await _build_latest_verification_index(guild)
    candidates = []
    for uid, (embed, _) in index.items():
        m = guild.get_member(uid)
        if m:
            candidates.append((m, embed))

    changed_lines = []
    error_lines = []

    for member, embed in candidates:
        age_text = _find_embed_field(embed, "age", "‡∏≠‡∏≤‡∏¢‡∏∏")
        sent_text = _find_embed_field(embed, "sent at")
        if not age_text or not sent_text:
            error_lines.append(f"‚ùå {member.mention}: Embed ‡∏Ç‡∏≤‡∏î Age/Sent at")
            continue

        if is_age_undisclosed(str(age_text)):
            new_role = guild.get_role(ROLE_AGE_UNDISCLOSED)
            to_remove = [r for r in member.roles if r.id in AGE_ROLE_IDS_ALL and (new_role is None or r.id != new_role.id)]
            try:
                if to_remove:
                    await member.remove_roles(*to_remove, reason="Age refresh ‚Üí undisclosed")
                if new_role and new_role not in member.roles:
                    await member.add_roles(new_role, reason="Age refresh ‚Üí undisclosed")
                changed_lines.append(f"‚úÖ {member.mention}: ‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏ ‚Üí {new_role.name if new_role else '‚Äî'}")
            except discord.Forbidden:
                error_lines.append(f"‚ùå {member.mention}: ‡∏õ‡∏£‡∏±‡∏ö‡∏¢‡∏® '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏≤‡∏¢‡∏∏' ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå)")
            except discord.HTTPException:
                error_lines.append(f"‚ùå {member.mention}: ‡∏õ‡∏£‡∏±‡∏ö‡∏¢‡∏® '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏≤‡∏¢‡∏∏' ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (HTTP)")
            continue

        try:
            old_age = int(str(age_text).strip())
        except ValueError:
            error_lines.append(f"‚ùå {member.mention}: Age ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç: {age_text!r}")
            continue

        sent_dt = _parse_sent_at(sent_text)
        if not sent_dt:
            error_lines.append(f"‚ùå {member.mention}: Sent at ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {sent_text!r}")
            continue

        added_years = _years_between(sent_dt, now)
        new_age = max(old_age + added_years, 0)
        new_role_id = resolve_age_role_id(str(new_age))
        new_role = guild.get_role(new_role_id) if new_role_id else None

        to_remove = [r for r in member.roles if r.id in AGE_ROLE_IDS_ALL and (new_role is None or r.id != new_role.id)]
        try:
            if to_remove:
                await member.remove_roles(*to_remove, reason=f"Age refresh ‚Üí now {new_age}")
        except discord.Forbidden:
            error_lines.append(f"‚ùå {member.mention}: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ñ‡∏≠‡∏î‡∏¢‡∏®‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏î‡∏¥‡∏°")
            continue
        except discord.HTTPException:
            error_lines.append(f"‚ùå {member.mention}: ‡∏ñ‡∏≠‡∏î‡∏¢‡∏®‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (HTTP)")
            continue

        if new_role:
            try:
                await member.add_roles(new_role, reason=f"Age refresh ‚Üí now {new_age}")
                old_names = ", ".join(r.name for r in to_remove) if to_remove else "‚Äî"
                changed_lines.append(f"‚úÖ {member.mention}: {new_age} ‡∏õ‡∏µ ‚Üí {new_role.name} (removed: {old_names})")
            except discord.Forbidden:
                error_lines.append(f"‚ùå {member.mention}: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏®‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÑ‡∏°‡πà‡∏û‡∏≠)")
            except discord.HTTPException:
                error_lines.append(f"‚ùå {member.mention}: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏®‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (HTTP)")
        else:
            changed_lines.append(f"‚ö†Ô∏è {member.mention}: {new_age} ‡∏õ‡∏µ ‚Üí ‡πÑ‡∏°‡πà‡∏°‡∏µ role ‡∏ó‡∏µ‡πà‡πÅ‡∏°‡∏õ‡πÑ‡∏ß‡πâ")

    tag = _refresh_period_tag(now, REFRESH_FREQUENCY)
    header = (
        f"{tag} ‚Ä¢ Guild: {guild.name}\n"
        f"Members found: {len(candidates)}\n"
        f"Changed/No-map: {len(changed_lines)} ‚Ä¢ Errors: {len(error_lines)}"
    )
    await _log_chunks(log_ch, header, changed_lines + (["‚Äî Errors ‚Äî"] + error_lines if error_lines else []))

# ====== Update latest approval embed (helpers) ======
async def _find_latest_approval_message(guild: discord.Guild, member: discord.Member):
    ch = guild.get_channel(APPROVAL_CHANNEL_ID)
    if not ch:
        return None
    async for m in ch.history(limit=1000):
        if m.author == bot.user and m.embeds and member in m.mentions:
            return m
    return None

def _set_or_add_field(embed: discord.Embed, name_keys: tuple[str, ...], display_name: str, value: str):
    name_keys_low = tuple(k.lower() for k in name_keys)
    for i, f in enumerate(embed.fields):
        nm = (f.name or "").lower()
        if any(k in nm for k in name_keys_low):
            embed.set_field_at(i, name=display_name, value=value, inline=False)
            return
    embed.add_field(name=display_name, value=value, inline=False)

async def _update_approval_embed_for_member(guild: discord.Guild, member: discord.Member, *,
                                            nickname: str | None = None,
                                            age: str | None = None,
                                            gender: str | None = None) -> bool:
    msg = await _find_latest_approval_message(guild, member)
    if not msg:
        return False
    e = msg.embeds[0]
    if nickname is not None:
        _set_or_add_field(e, ("nickname", "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô"), "Nickname / ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô", nickname or "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
    if age is not None:
        _set_or_add_field(e, ("age", "‡∏≠‡∏≤‡∏¢‡∏∏"), "Age / ‡∏≠‡∏≤‡∏¢‡∏∏", age or "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
    if gender is not None:
        _set_or_add_field(e, ("gender", "‡πÄ‡∏û‡∏®"), "Gender / ‡πÄ‡∏û‡∏®", gender or "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
    try:
        await msg.edit(embed=e)
        return True
    except discord.HTTPException:
        return False

# ====== Account risk helpers (age-only) ======
from datetime import timezone as _dt_timezone
def assess_account_risk_age_only(user: discord.User) -> tuple[int | None, str, list[str]]:
    try:
        created_at = user.created_at
        if created_at.tzinfo is None:
            created_at = created_at.replace(tzinfo=_dt_timezone.utc)
        now = datetime.now(_dt_timezone.utc)
        age_days = (now - created_at).days
    except Exception:
        return None, "UNKNOWN", ["cannot compute account age"]

    reasons = []
    if age_days < MIN_ACCOUNT_AGE_DAYS_HIGH:
        reasons.append(f"age<{MIN_ACCOUNT_AGE_DAYS_HIGH}d")
        return age_days, "HIGH", reasons
    if age_days < MIN_ACCOUNT_AGE_DAYS_MED:
        reasons.append(f"age<{MIN_ACCOUNT_AGE_DAYS_MED}d")
        return age_days, "MED", reasons
    return age_days, "LOW", reasons

def build_account_check_field(user: discord.User) -> tuple[str, str, str, int | None]:
    age_days, risk, reasons = assess_account_risk_age_only(user)
    icon = "‚ö†Ô∏è" if risk == "HIGH" else ("üüß" if risk == "MED" else ("üü©" if risk == "LOW" else "‚ùî"))
    age_txt = "‚Äî" if age_days is None else f"{age_days} days"
    reason_txt = f" ‚Ä¢ Reasons: {', '.join(reasons)}" if reasons else ""
    name = "üõ°Ô∏è Account Check"
    value = f"Account age: {age_txt} ‚Ä¢ Risk: {risk} {icon}{reason_txt}"
    return name, value, risk, age_days

# =========== Modal / Views / Commands ===========
class VerificationForm(discord.ui.Modal, title="Verify Identity / ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô"):
    name = discord.ui.TextInput(
        label="Nickname / ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏)",
        placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô 2‚Äì10 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ (‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á)",
        style=discord.TextStyle.short,
        min_length=2, max_length=10,   
        required=True                  
    )
    age = discord.ui.TextInput(
        label="Age / ‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡πà‡∏≤‡∏á = ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏)",
        placeholder='‡πÄ‡∏ä‡πà‡∏ô 21',
        style=discord.TextStyle.short,
        min_length=0, max_length=16, required=False
    )
    gender = discord.ui.TextInput(
        label="Gender / ‡πÄ‡∏û‡∏® (‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡πà‡∏≤‡∏á = ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏)",
        placeholder='‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡∏≤‡∏¢ / ‡∏´‡∏ç‡∏¥‡∏á / LGBT',
        style=discord.TextStyle.short,
        min_length=0, required=False
    )

    async def on_submit(self, interaction: discord.Interaction):
        try:
            if not interaction.response.is_done():
                await interaction.response.defer(ephemeral=True)

            # üîí ‡∏Å‡∏±‡∏ô‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ã‡πâ‡∏≥ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏¢‡∏®‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            member = interaction.guild.get_member(interaction.user.id) or await interaction.guild.fetch_member(interaction.user.id)
            if member and any(r.id == ROLE_ID_TO_GIVE for r in member.roles):
                await interaction.followup.send(
                    "‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ\n"
                    "‡∏´‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•",
                    ephemeral=True
                )
                return

            if interaction.user.id in pending_verifications:
                await interaction.followup.send(
                    "‚ùó You already submitted a verification request. Please wait for admin review.\n"
                    "‚ùó ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
                    ephemeral=True
                )
                return

            # --- Validate age ---
            age_raw = (self.age.value or "").strip()
            if not (age_raw == "" or re.fullmatch(r"\d{1,3}", age_raw) or is_age_undisclosed(age_raw)):
                await interaction.followup.send(
                    "‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n"
                    "‚Ä¢ ‡πÉ‡∏™‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1‚Äì3 ‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏ä‡πà‡∏ô 21\n"
                    "‚Ä¢ ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå/‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡πà‡∏≤‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠ ‚Äú‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‚Äù",
                    ephemeral=True
                )
                return

            # --- Validate nickname (if provided) ---
            nick = (self.name.value or "").strip()
            if len(nick) < 2 or len(nick) > 32 \
               or any(ch.isdigit() for ch in nick) \
               or any(c in INVALID_CHARS for c in nick) \
               or contains_emoji(nick):
                await interaction.followup.send(
                    "‚ùå Nickname invalid (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ 2‚Äì32 ‡∏ï‡∏±‡∏ß, ‡∏´‡πâ‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç/‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå/‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥ ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏)",
                    ephemeral=True
                )
                return
            if _canon_full(nick) in _discord_names_set(interaction.user):
                await interaction.followup.send(
                    "‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏î‡∏¥‡∏™‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏£‡∏¥‡∏á ‡πÜ",
                    ephemeral=True
                )
                return

            # --- Validate gender (text only when provided) ---
            gender_raw = (self.gender.value or "")
            if gender_raw.strip():
                if _norm_gender(gender_raw) not in GENDER_UNDISCLOSED_ALIASES:
                    if any(ch.isdigit() for ch in gender_raw) or any(c in INVALID_CHARS for c in gender_raw) or contains_emoji(gender_raw):
                        await interaction.followup.send("‚ùå Gender invalid. Text only.", ephemeral=True)
                        return

            pending_verifications.add(interaction.user.id)

            # Prepare embed fields
            display_nick = nick
            display_age = (age_raw if age_raw else "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
            display_gender = (gender_raw.strip() if gender_raw.strip() else "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")

            embed = discord.Embed(title="üìã Verification Request / ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô", color=discord.Color.orange())
            thumb_url = interaction.user.display_avatar.with_static_format("png").with_size(128).url
            embed.set_thumbnail(url=thumb_url)
            embed.add_field(name="Nickname / ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô", value=display_nick, inline=False)
            embed.add_field(name="Age / ‡∏≠‡∏≤‡∏¢‡∏∏", value=display_age, inline=False)
            embed.add_field(name="Gender / ‡πÄ‡∏û‡∏®", value=display_gender, inline=False)

            # Account risk (age only)
            if ACCOUNT_RISK_ENABLED:
                name, value, risk, age_days = build_account_check_field(interaction.user)
                embed.add_field(name=name, value=value, inline=False)
                if risk == "HIGH":
                    await notify_admin(interaction.guild, f"{interaction.user.mention} ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ({age_days} ‡∏ß‡∏±‡∏ô)")

            now = datetime.now(timezone(timedelta(hours=7)))
            embed.add_field(name="üìÖ Sent at", value=now.strftime("%d/%m/%Y %H:%M"), inline=False)
            embed.set_footer(text=f"User ID: {interaction.user.id}")

            channel = interaction.guild.get_channel(APPROVAL_CHANNEL_ID)
            if not channel:
                await notify_admin(interaction.guild, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á APPROVAL_CHANNEL_ID")
                await interaction.followup.send("‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", ephemeral=True)
                return

            view = ApproveRejectView(
                user=interaction.user,
                gender_text=gender_raw,
                age_text=age_raw if age_raw else "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                form_name=nick,
            )
            await channel.send(
                content=interaction.user.mention,
                embed=embed,
                view=view,
                allowed_mentions=discord.AllowedMentions(everyone=False, roles=False, users=True),
            )

            await interaction.followup.send(
                "‚úÖ Verification request submitted. Please wait for admin approval.\n"
                "‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
                ephemeral=True
            )
        except Exception as e:
            pending_verifications.discard(interaction.user.id)
            await notify_admin(interaction.guild, f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ï‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏á {interaction.user.mention}: {e!r}")
            try:
                await interaction.followup.send("‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á", ephemeral=True)
            except Exception:
                pass

class VerificationView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="Verify Identity / ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô", style=discord.ButtonStyle.success, emoji="‚úÖ", custom_id="verify_button")
    async def confirm_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        # üîí ‡∏ñ‡πâ‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏°‡∏µ‡∏¢‡∏®‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°
        member = interaction.guild.get_member(interaction.user.id) or await interaction.guild.fetch_member(interaction.user.id)
        if member and any(r.id == ROLE_ID_TO_GIVE for r in member.roles):
            await interaction.response.send_message(
                "‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏î‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n"
                "‡∏´‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•",
                ephemeral=True
            )
            return

        await interaction.response.send_modal(VerificationForm())

class ApproveRejectView(discord.ui.View):
    def __init__(self, user: discord.User, gender_text: str, age_text: str, form_name: str):
        super().__init__(timeout=None)
        self.user = user
        self.gender_text = (gender_text or "").strip()
        self.age_text = (age_text or "").strip()
        self.form_name = (form_name or "").strip()

    @discord.ui.button(label="‚úÖ Approve / ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥", style=discord.ButtonStyle.success, custom_id="approve_button")
    async def approve(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            if not interaction.response.is_done():
                await interaction.response.defer()

            member = interaction.guild.get_member(self.user.id) or await interaction.guild.fetch_member(self.user.id)
            general_role = interaction.guild.get_role(ROLE_ID_TO_GIVE)
            gender_role = interaction.guild.get_role(resolve_gender_role_id(self.gender_text))
            age_role_id = resolve_age_role_id(self.age_text)
            age_role = interaction.guild.get_role(age_role_id) if age_role_id else None

            if not (member and general_role and gender_role):
                await interaction.followup.send("‚ùå Member or role not found.", ephemeral=True)
                await notify_admin(interaction.guild, "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡πÑ‡∏°‡πà‡∏û‡∏ö member/role")
                return

            # enforce one gender role
            try:
                to_remove_gender = [r for r in member.roles if r.id in GENDER_ROLE_IDS_ALL and (gender_role is None or r.id != gender_role.id)]
                if to_remove_gender:
                    await member.remove_roles(*to_remove_gender, reason="Verification: enforce single gender role")
            except discord.Forbidden:
                await interaction.followup.send("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ñ‡∏≠‡∏î‡∏¢‡∏®‡πÄ‡∏û‡∏®‡πÄ‡∏î‡∏¥‡∏°", ephemeral=True)
                return

            # enforce one age role (only if new exists)
            if age_role:
                try:
                    to_remove_age = [r for r in member.roles if r.id in AGE_ROLE_IDS_ALL and r.id != age_role.id]
                    if to_remove_age:
                        await member.remove_roles(*to_remove_age, reason="Verification: enforce single age role")
                except discord.Forbidden:
                    await interaction.followup.send("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ñ‡∏≠‡∏î‡∏¢‡∏®‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏î‡∏¥‡∏°", ephemeral=True)
                    return

            roles_to_add = []
            if general_role and general_role not in member.roles: roles_to_add.append(general_role)
            if gender_role and gender_role not in member.roles: roles_to_add.append(gender_role)
            if age_role and age_role not in member.roles: roles_to_add.append(age_role)

            if roles_to_add:
                try:
                    await member.add_roles(*roles_to_add, reason="Verified")
                except discord.Forbidden:
                    await interaction.followup.send("‚ùå Missing permissions to add roles.", ephemeral=True)
                    await notify_admin(interaction.guild, f"‡∏ö‡∏≠‡∏ó‡πÉ‡∏´‡πâ‡∏¢‡∏®‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà {member.mention}")
                    return

            # ‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô: ‡∏ó‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            if APPEND_FORM_NAME_TO_NICK and self.form_name:
                bot_me = interaction.guild.me or await interaction.guild.fetch_member(bot.user.id)
                try:
                    if bot_me and bot_me.guild_permissions.manage_nicknames and bot_me.top_role > member.top_role and member.guild.owner_id != member.id:
                        new_nick = build_parenthesized_nick(member, self.form_name)
                        current_nick = member.nick or ""
                        if new_nick and new_nick != current_nick:
                            await member.edit(nick=new_nick, reason="Verification: append form nickname")
                except Exception:
                    pass

            pending_verifications.discard(self.user.id)
        except Exception as e:
            await notify_admin(interaction.guild, f"Approve error: {e!r}")
        finally:
            for child in self.children:
                if getattr(child, "custom_id", None) == "approve_button":
                    child.label = "‚úÖ Approved / ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß"
                    child.style = discord.ButtonStyle.success
                elif getattr(child, "custom_id", None) == "reject_button":
                    child.style = discord.ButtonStyle.secondary
                child.disabled = True

            try:
                msg = interaction.message
                if msg and msg.embeds:
                    e = msg.embeds[0]
                    actor = getattr(interaction.user, "display_name", None) or interaction.user.name
                    stamp = datetime.now(timezone(timedelta(hours=7))).strftime("%d/%m/%Y %H:%M")
                    orig = e.footer.text or ""
                    footer = f"{orig} ‚Ä¢ Approved by {actor} ‚Ä¢ {stamp}" if orig else f"Approved by {actor} ‚Ä¢ {stamp}"
                    e.set_footer(text=footer)
                    await msg.edit(embed=e, view=self)
                else:
                    await interaction.message.edit(view=self)
            except discord.NotFound:
                pass

    @discord.ui.button(label="‚ùå Reject / ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò", style=discord.ButtonStyle.danger, custom_id="reject_button")
    async def reject(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            if not interaction.response.is_done():
                await interaction.response.defer()

            pending_verifications.discard(self.user.id)
            try:
                await self.user.send(
                    "‚ùå Your verification was rejected. Please contact admin.\n"
                    "‚ùå ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô"
                )
            except Exception:
                await interaction.followup.send("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á DM ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ", ephemeral=True)

        except Exception as e:
            await notify_admin(interaction.guild, f"Reject error: {e!r}")
        finally:
            for child in self.children:
                if getattr(child, "custom_id", None) == "reject_button":
                    child.label = "‚ùå Rejected / ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡πâ‡∏ß"
                    child.style = discord.ButtonStyle.danger
                elif getattr(child, "custom_id", None) == "approve_button":
                    child.style = discord.ButtonStyle.secondary
                child.disabled = True

            try:
                msg = interaction.message
                if msg and msg.embeds:
                    e = msg.embeds[0]
                    actor = getattr(interaction.user, "display_name", None) or interaction.user.name
                    stamp = datetime.now(timezone(timedelta(hours=7))).strftime("%d/%m/%Y %H:%M")
                    orig = e.footer.text or ""
                    footer = f"{orig} ‚Ä¢ Rejected by {actor} ‚Ä¢ {stamp}" if orig else f"Rejected by {actor} ‚Ä¢ {stamp}"
                    e.set_footer(text=footer)
                    await msg.edit(embed=e, view=self)
                else:
                    await interaction.message.edit(view=self)
            except discord.NotFound:
                pass

# ====== Commands ======
@bot.command(name="verify_embed")
@commands.has_permissions(administrator=True)
async def verify_embed(ctx):
    try:
        channel = ctx.guild.get_channel(VERIFY_CHANNEL_ID)
        if not channel:
            await ctx.send("‚ùå VERIFY_CHANNEL_ID not found.")
            return
        embed = discord.Embed(
            title="üìå Welcome / ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö",
            description="Click the button below to verify your identity.\n‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
            color=discord.Color.blue()
        )
        embed.set_image(url="https://i.pinimg.com/originals/da/79/68/da7968c54b12ba7ebf7dfd70dd1faaf2.gif")
        embed.set_footer(text="Verification System / ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÇ‡∏î‡∏¢ Bot")
        await channel.send(embed=embed, view=VerificationView())
        await ctx.send(f"‚úÖ Verification embed sent to {channel.mention}")
    except Exception as e:
        await notify_admin(ctx.guild, f"verify_embed error: {e!r}")
        await ctx.send("‚ùå ‡∏™‡πà‡∏á embed ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

@bot.command(name="userinfo")
@commands.has_permissions(administrator=True)
async def userinfo(ctx, *, who: str = None):
    """
    $userinfo
    $userinfo @someone
    $userinfo 123456789012345678
    """
    try:
        # ---------- ‡∏´‡∏≤ member ----------
        member = None
        if ctx.message.mentions:
            member = ctx.message.mentions[0]
        elif who:
            try:
                member = await commands.MemberConverter().convert(ctx, who)
            except commands.BadArgument:
                member = None
        if member is None:
            member = ctx.author

        # ---------- ‡∏´‡∏≤ approval channel ----------
        channel = ctx.guild.get_channel(APPROVAL_CHANNEL_ID)
        if not channel:
            await ctx.send("‚ùå APPROVAL_CHANNEL_ID not found.")
            return

        # ---------- loop ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ ----------
        try:
            async for message in channel.history(limit=200):
                if (
                    message.author == bot.user
                    and message.embeds
                    and message.mentions
                    and member in message.mentions
                ):
                    embed0 = message.embeds[0]
                    new_embed = copy_embed_fields(embed0)
                    new_embed.title = "ü™™ ID Card / ‡∏ö‡∏±‡∏ï‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô"

                    if message.attachments:
                        try:
                            att = message.attachments[0]
                            data = await att.read()
                            fname = att.filename or f"avatar_{member.id}.png"
                            file = discord.File(io.BytesIO(data), filename=fname)
                            new_embed.set_thumbnail(url=f"attachment://{fname}")
                            await ctx.send(file=file, embed=new_embed)
                            return
                        except Exception:
                            pass

                    await ctx.send(embed=new_embed)
                    return

        except discord.Forbidden:
            await ctx.send(
                "‚ùå ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏≠‡πà‡∏≤‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥\n"
                "‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå View Channel + Read Message History"
            )
            return
        except discord.HTTPException as e:
            await ctx.send(f"‚ùå ‡∏≠‡πà‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
            return

        await ctx.send("‚ùå No verification info found for this user.")

    except Exception as e:
        await notify_admin(ctx.guild, f"userinfo error: {e!r}")
        await ctx.send(f"‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e!r}")


# ---------- Single user refresh ----------
@bot.command(name="refresh_age")
@commands.has_permissions(administrator=True)
async def refresh_age(ctx, member: discord.Member):
    try:
        embed = await _latest_verification_embed_for(member)
        if not embed:
            await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥")
            return

        age_text = _find_embed_field(embed, "age", "‡∏≠‡∏≤‡∏¢‡∏∏")
        sent_text = _find_embed_field(embed, "sent at")
        if not age_text or not sent_text:
            await ctx.send("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô embed ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö (Age ‡∏´‡∏£‡∏∑‡∏≠ Sent at ‡∏´‡∏≤‡∏¢)")
            return

        # ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏≤‡∏¢‡∏∏
        if is_age_undisclosed(str(age_text)):
            new_age_role = ctx.guild.get_role(ROLE_AGE_UNDISCLOSED)
            to_remove = [r for r in member.roles if r.id in AGE_ROLE_IDS_ALL and (new_age_role is None or r.id != new_age_role.id)]
            if to_remove:
                try:
                    await member.remove_roles(*to_remove, reason="Refresh age ‚Üí undisclosed")
                except discord.Forbidden:
                    await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ñ‡∏≠‡∏î‡∏¢‡∏®‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ")
                    return
            if new_age_role and new_age_role not in member.roles:
                try:
                    await member.add_roles(new_age_role, reason="Refresh age ‚Üí undisclosed")
                except discord.Forbidden:
                    await ctx.send("‚ö†Ô∏è ‡∏ñ‡∏≠‡∏î‡∏¢‡∏®‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏®‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏≤‡∏¢‡∏∏")
                    return
            got = new_age_role.name if new_age_role else "‚Äî (‡πÑ‡∏°‡πà‡∏°‡∏µ role ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ)"
            await ctx.send(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏¢‡∏®‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏õ‡πá‡∏ô **{got}** ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö {member.mention} ‡πÅ‡∏•‡πâ‡∏ß (‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏≤‡∏¢‡∏∏)")
            return

        # ‡πÄ‡∏î‡∏¥‡∏°: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        try:
            old_age = int(str(age_text).strip())
        except ValueError:
            await ctx.send("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô embed ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
            return

        sent_dt = _parse_sent_at(sent_text)
        if not sent_dt:
            await ctx.send("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ 'Sent at' ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô dd/mm/YYYY HH:MM)")
            return

        now = datetime.now(timezone(timedelta(hours=7)))
        added_years = _years_between(sent_dt, now)
        new_age = max(old_age + added_years, 0)

        new_age_role_id = resolve_age_role_id(str(new_age))
        new_age_role = ctx.guild.get_role(new_age_role_id) if new_age_role_id else None

        to_remove = [r for r in member.roles if r.id in AGE_ROLE_IDS_ALL and (new_age_role is None or r.id != new_age_role.id)]
        if to_remove:
            try:
                await member.remove_roles(*to_remove, reason=f"Refresh age ‚Üí now {new_age}")
            except discord.Forbidden:
                await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ñ‡∏≠‡∏î‡∏¢‡∏®‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ")
                return

        if new_age_role:
            try:
                await member.add_roles(new_age_role, reason=f"Refresh age ‚Üí now {new_age}")
            except discord.Forbidden:
                await ctx.send(f"‚ö†Ô∏è ‡∏ñ‡∏≠‡∏î‡∏¢‡∏®‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏®‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {new_age_role.name}")
                return

        got = new_age_role.name if new_age_role else "‚Äî (‡πÑ‡∏°‡πà‡∏°‡∏µ role ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ)"
        await ctx.send(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏õ‡πá‡∏ô **{new_age}** ‡∏õ‡∏µ ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏¢‡∏®‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏õ‡πá‡∏ô **{got}** ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö {member.mention} ‡πÅ‡∏•‡πâ‡∏ß")
    except Exception as e:
        await notify_admin(ctx.guild, f"refresh_age error: {e!r}")
        await ctx.send("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")

# ---------- All users refresh ----------
@bot.command(name="refresh_age_all")
@commands.has_permissions(administrator=True)
async def refresh_age_all(ctx):
    try:
        await ctx.send("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ...")
        await _run_full_age_refresh(ctx.guild)
        await ctx.send("‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á log)")
    except Exception as e:
        await notify_admin(ctx.guild, f"refresh_age_all error: {e!r}")
        await ctx.send("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")

# ====== Admin adjust commands ======
CLEAR_ALIASES = {"clear", "reset", "remove", "none", "no", "x", "-", "‚Äî", "‡∏•‡∏ö", "‡πÄ‡∏≠‡∏≤‡∏≠‡∏≠‡∏Å", "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ", "‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà", "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á"}

def _bot_can_edit_member_and_role(ctx: commands.Context, member: discord.Member, role: discord.Role | None = None) -> tuple[bool, str]:
    bot_me = ctx.guild.me
    if not bot_me:
        return False, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡πÉ‡∏ô‡∏Å‡∏¥‡∏•‡∏î‡πå"
    if bot_me.top_role <= member.top_role or member.id == ctx.guild.owner_id:
        return False, "‚ùå ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏¢‡∏®‡∏™‡∏π‡∏á‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ"
    if role and bot_me.top_role <= role:
        return False, f"‚ùå ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏¢‡∏®‡∏™‡∏π‡∏á‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏¢‡∏®: {role.name}"
    return True, ""

@bot.command(name="setnick", aliases=["nick", "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô", "‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô"])
@commands.has_permissions(manage_nicknames=True)
async def setnick(ctx: commands.Context, member: discord.Member, *, nickname: str):
    try:
        ok, msg = _bot_can_edit_member_and_role(ctx, member, None)
        if not ok:
            await ctx.send(msg)
            return

        want_clear = (_norm_simple(nickname) in CLEAR_ALIASES) or (nickname.strip() == "")
        if want_clear:
            base = _base_display_name(member)
            try:
                await member.edit(nick=base, reason="Admin: clear form nickname")
                await ctx.send(f"‚úÖ ‡πÄ‡∏≠‡∏≤‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‚Üí `{base}` (‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: {member.mention})")
            except discord.Forbidden:
                await ctx.send("‚ùå ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏û‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ"); return
            except discord.HTTPException:
                await ctx.send("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î HTTP ‡∏ï‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠"); return

            updated = await _update_approval_embed_for_member(ctx.guild, member, nickname="‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
            if not updated:
                await ctx.send("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö embed ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
            return

        # validate ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô
        if len(nickname) < 2 or len(nickname) > 32 or any(ch.isdigit() for ch in nickname) \
           or any(c in INVALID_CHARS for c in nickname) or contains_emoji(nickname):
            await ctx.send("‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ 2‚Äì32 ‡∏ï‡∏±‡∏ß, ‡∏´‡πâ‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç/‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå/‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥)")
            return
        if _canon_full(nickname) in _discord_names_set(member):
            await ctx.send("‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏î‡∏¥‡∏™‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á ‡πÜ")
            return

        new_nick = build_parenthesized_nick(member, nickname)
        try:
            await member.edit(nick=new_nick, reason=f"Admin: set form nickname ‚Üí {nickname}")
            await ctx.send(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô `{new_nick}` ‡πÉ‡∏´‡πâ {member.mention}")
        except discord.Forbidden:
            await ctx.send("‚ùå ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏û‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ"); return
        except discord.HTTPException:
            await ctx.send("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î HTTP ‡∏ï‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠"); return

        updated = await _update_approval_embed_for_member(ctx.guild, member, nickname=nickname)
        if not updated:
            await ctx.send("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö embed ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
    except Exception as e:
        await notify_admin(ctx.guild, f"setnick error: {e!r}")
        await ctx.send("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")

@bot.command(name="setgender", aliases=["gender", "‡πÄ‡∏û‡∏®", "‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏®"])
@commands.has_permissions(manage_roles=True)
async def setgender(ctx: commands.Context, member: discord.Member, *, gender_text: str = ""):
    try:
        role_id = resolve_gender_role_id(gender_text)
        role = ctx.guild.get_role(role_id)
        if not role:
            await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö role ‡πÄ‡∏û‡∏®‡∏ó‡∏µ‡πà‡πÅ‡∏°‡∏õ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏ô‡∏µ‡πâ")
            return

        ok, msg = _bot_can_edit_member_and_role(ctx, member, role)
        if not ok:
            await ctx.send(msg)
            return
        if not ctx.guild.me.guild_permissions.manage_roles:
            await ctx.send("‚ùå ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Manage Roles")
            return

        to_remove = [r for r in member.roles if r.id in GENDER_ROLE_IDS_ALL and r.id != role.id]
        try:
            if to_remove:
                await member.remove_roles(*to_remove, reason="Admin: set gender (enforce single gender role)")
            if role not in member.roles:
                await member.add_roles(role, reason="Admin: set gender")
        except discord.Forbidden:
            await ctx.send("‚ùå ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏õ‡∏£‡∏±‡∏ö‡∏¢‡∏®‡πÄ‡∏û‡∏®‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ"); return
        except discord.HTTPException:
            await ctx.send("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î HTTP ‡∏ï‡∏≠‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏¢‡∏®‡πÄ‡∏û‡∏®"); return

        removed_txt = ", ".join(r.name for r in to_remove) if to_remove else "‚Äî"
        await ctx.send(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏®‡∏Ç‡∏≠‡∏á {member.mention} ‡πÄ‡∏õ‡πá‡∏ô **{role.name}** (removed: {removed_txt})")

        updated = await _update_approval_embed_for_member(ctx.guild, member, gender=role.name)
        if not updated:
            await ctx.send("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö embed ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
    except Exception as e:
        await notify_admin(ctx.guild, f"setgender error: {e!r}")
        await ctx.send("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")

@bot.command(name="setage", aliases=["age", "‡∏≠‡∏≤‡∏¢‡∏∏", "‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏"])
@commands.has_permissions(manage_roles=True)
async def setage(ctx: commands.Context, member: discord.Member, *, age_text: str):
    try:
        if _norm_simple(age_text) in CLEAR_ALIASES or not age_text.strip():
            age_text = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"

        role_id = resolve_age_role_id(age_text)
        if not role_id:
            await ctx.send("‚ùå ‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÉ‡∏™‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 0‚Äì200 ‡∏´‡∏£‡∏∑‡∏≠ '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')")
            return
        role = ctx.guild.get_role(role_id)
        if not role:
            await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö role ‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏µ‡πà‡πÅ‡∏°‡∏õ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏ô‡∏µ‡πâ")
            return

        ok, msg = _bot_can_edit_member_and_role(ctx, member, role)
        if not ok:
            await ctx.send(msg)
            return
        if not ctx.guild.me.guild_permissions.manage_roles:
            await ctx.send("‚ùå ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Manage Roles")
            return

        to_remove = [r for r in member.roles if r.id in AGE_ROLE_IDS_ALL and r.id != role.id]
        try:
            if to_remove:
                await member.remove_roles(*to_remove, reason="Admin: set age (enforce single age role)")
            if role not in member.roles:
                await member.add_roles(role, reason="Admin: set age")
        except discord.Forbidden:
            await ctx.send("‚ùå ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏õ‡∏£‡∏±‡∏ö‡∏¢‡∏®‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ"); return
        except discord.HTTPException:
            await ctx.send("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î HTTP ‡∏ï‡∏≠‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏¢‡∏®‡∏≠‡∏≤‡∏¢‡∏∏"); return

        removed_txt = ", ".join(r.name for r in to_remove) if to_remove else "‚Äî"
        await ctx.send(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á {member.mention} ‡πÄ‡∏õ‡πá‡∏ô **{role.name}** (removed: {removed_txt})")

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï embed
        disp_age = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏" if role.id == ROLE_AGE_UNDISCLOSED else (re.search(r"\d{1,3}", age_text).group(0) if re.search(r"\d{1,3}", age_text) else age_text.strip())
        updated = await _update_approval_embed_for_member(ctx.guild, member, age=disp_age)
        if not updated:
            await ctx.send("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö embed ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
    except Exception as e:
        await notify_admin(ctx.guild, f"setage error: {e!r}")
        await ctx.send("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")

# ---------- Force re-verification ----------
@bot.command(name="reverify", aliases=["‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà", "forceverify"])
@commands.has_permissions(manage_roles=True)
async def reverify(ctx: commands.Context, member: discord.Member):
    """‡∏•‡∏ö‡∏¢‡∏®‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô/‡∏¢‡∏®‡πÄ‡∏û‡∏®/‡∏¢‡∏®‡∏≠‡∏≤‡∏¢‡∏∏ + ‡∏•‡∏ö embed ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ + ‡∏™‡πà‡∏á DM ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà"""
    try:
        ok, msg = _bot_can_edit_member_and_role(ctx, member)
        if not ok:
            await ctx.send(msg); return

        # remove roles (general + gender + age)
        to_remove = [r for r in member.roles if r.id in {ROLE_ID_TO_GIVE, *GENDER_ROLE_IDS_ALL, *AGE_ROLE_IDS_ALL}]
        if to_remove:
            try:
                await member.remove_roles(*to_remove, reason="Force re-verification")
            except discord.Forbidden:
                await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ñ‡∏≠‡∏î‡∏¢‡∏®‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ"); return

        # reset nickname to base (‡∏ï‡∏±‡∏î‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö‡∏≠‡∏≠‡∏Å)
        try:
            base = _base_display_name(member)
            await member.edit(nick=base, reason="Force re-verification (reset nickname)")
        except Exception:
            pass

        # delete latest approval embed
        msg_obj = await _find_latest_approval_message(ctx.guild, member)
        if msg_obj:
            try:
                await msg_obj.delete()
            except Exception:
                pass

        # DM instructions
        try:
            await member.send(
                f"‚ÑπÔ∏è ‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå **{ctx.guild.name}**\n"
                f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏á <#{VERIFY_CHANNEL_ID}> ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° **Verify Identity** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
            )
        except Exception:
            await ctx.send("‚ö†Ô∏è ‡∏™‡πà‡∏á DM ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")

        await ctx.send(f"‚úÖ ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ {member.mention} ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß (roles cleared + embed removed)")
        await notify_admin(ctx.guild, f"{member.mention} ‡∏ñ‡∏π‡∏Å‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢ {ctx.author.mention}")
    except Exception as e:
        await notify_admin(ctx.guild, f"reverify error: {e!r}")
        await ctx.send("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")

# ====== Help command (list & details) ======
try:
    bot.remove_command("help")
except Exception:
    pass

_SHORT_DESC = {
    "help": "‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏",
    "verify_embed": "‡∏™‡πà‡∏á Embed ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡πâ‡∏≠‡∏á VERIFY_CHANNEL_ID",
    "userinfo": "‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
    "refresh_age": "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏®‡∏≠‡∏≤‡∏¢‡∏∏‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ (‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•)",
    "refresh_age_all": "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏®‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏° logs",
    "setnick": "‡∏ï‡∏±‡πâ‡∏á/‡∏•‡∏ö ‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏î‡∏¥‡∏™‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å",
    "setgender": "‡∏ï‡∏±‡πâ‡∏á‡∏¢‡∏®‡πÄ‡∏û‡∏® (‡∏ä‡∏≤‡∏¢/‡∏´‡∏ç‡∏¥‡∏á/LGBT/‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏)",
    "setage": "‡∏ï‡∏±‡πâ‡∏á‡∏¢‡∏®‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏£‡∏∑‡∏≠ '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')",
    "reverify": "‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÉ‡∏´‡∏°‡πà (‡∏•‡∏ö roles + ‡∏•‡∏ö embed + DM)",
}

_HELP_DETAILS = {
    "help": {
        "usage": "$help [‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á]",
        "example": "$help setage",
        "note": "‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏≠‡∏≤‡∏£‡πå‡∏Å‡∏¥‡∏ß‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏à‡∏∞‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
    },
    "verify_embed": {
        "usage": "$verify_embed",
        "example": "$verify_embed",
        "note": "‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Administrator",
    },
    "userinfo": {
        "usage": "$userinfo @‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å",
        "example": "$userinfo @Alice",
        "note": "‡∏î‡∏∂‡∏á embed ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
    },
    "refresh_age": {
        "usage": "$refresh_age @‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å",
        "example": "$refresh_age @Alice",
        "note": "‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå 'Sent at' ‡∏Ç‡∏≠‡∏á embed",
    },
    "refresh_age_all": {
        "usage": "$refresh_age_all",
        "example": "$refresh_age_all",
        "note": "‡∏£‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏õ‡∏´‡πâ‡∏≠‡∏á log",
    },
    "setnick": {
        "usage": "$setnick @‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å <‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô|clear>",
        "example": "$setnick @Alice ‡∏°‡∏¥‡∏ô‡∏ô‡∏µ‡πà\n$setnick @Alice clear",
        "note": "‡∏ï‡πâ‡∏≠‡∏á Manage Nicknames; ‡πÉ‡∏ä‡πâ clear/reset/remove/‡∏•‡∏ö ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö",
    },
    "setgender": {
        "usage": "$setgender @‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å [‡πÄ‡∏û‡∏®]",
        "example": "$setgender @Alice ‡∏´‡∏ç‡∏¥‡∏á\n$setgender @Bob ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
        "note": "‡∏ï‡πâ‡∏≠‡∏á Manage Roles; ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á = ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
    },
    "setage": {
        "usage": "$setage @‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å <‡∏≠‡∏≤‡∏¢‡∏∏|‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏|clear>",
        "example": "$setage @Alice 21\n$setage @Bob ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏\n$setage @Bob clear",
        "note": "‡∏ï‡πâ‡∏≠‡∏á Manage Roles; ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏±‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
    },
    "reverify": {
        "usage": "$reverify @‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å",
        "example": "$reverify @Alice",
        "note": "‡∏•‡∏ö‡∏¢‡∏®‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô/‡∏≠‡∏≤‡∏¢‡∏∏/‡πÄ‡∏û‡∏® + ‡∏•‡∏ö embed ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ + ‡∏™‡πà‡∏á DM ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà",
    },
}

_ADMIN_COMMANDS = {"verify_embed", "userinfo", "refresh_age", "refresh_age_all", "setnick", "setgender", "setage", "reverify"}

def _fmt_cmd_list(prefix: str, names: list[str]) -> str:
    lines = []
    for n in names:
        desc = _SHORT_DESC.get(n, "-")
        lines.append(f"‚Ä¢ **{prefix}{n}** ‚Äî {desc}")
    return "\n".join(lines) if lines else "‚Äî"

@bot.command(name="help", aliases=["commands", "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á", "‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ"])
async def help_command(ctx: commands.Context, *, command_name: str = None):
    try:
        prefix = ctx.prefix or "$"

        if command_name:
            cmd = bot.get_command(command_name.lower())
            if not cmd:
                await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠ `{command_name}`")
                return

            name = cmd.name
            desc_short = _SHORT_DESC.get(name, cmd.help or "-")
            detail = _HELP_DETAILS.get(name, {})
            usage = detail.get("usage", f"{prefix}{name} ‚Ä¶")
            example = detail.get("example", "-")
            note = detail.get("note", None)

            aliases = ", ".join(cmd.aliases) if getattr(cmd, "aliases", None) else "‚Äî"
            is_admin = "‚úÖ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ" if name not in _ADMIN_COMMANDS else "üõ°Ô∏è ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á)"

            embed = discord.Embed(
                title=f"‚ÑπÔ∏è ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {prefix}{name}",
                description=desc_short,
                color=discord.Color.blurple()
            )
            embed.add_field(name="‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", value=f"`{usage}`", inline=False)
            embed.add_field(name="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á", value=f"```\n{example}\n```", inline=False)
            embed.add_field(name="Aliases", value=aliases, inline=True)
            embed.add_field(name="‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ", value=is_admin, inline=True)
            if note:
                embed.add_field(name="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", value=note, inline=False)

            await ctx.send(embed=embed)
            return

        all_cmds = {c.name for c in bot.commands if not c.hidden}
        general = sorted(all_cmds - _ADMIN_COMMANDS | {"help"})
        admin = sorted(all_cmds & _ADMIN_COMMANDS)

        embed = discord.Embed(
            title="üìú ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
            description=f"‡∏û‡∏¥‡∏°‡∏û‡πå `{prefix}help <‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á>` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
            color=discord.Color.green()
        )
        embed.add_field(name="‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", value=_fmt_cmd_list(prefix, general), inline=False)
        embed.add_field(name="‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•", value=_fmt_cmd_list(prefix, admin), inline=False)

        await ctx.send(embed=embed)
    except Exception as e:
        await notify_admin(ctx.guild, f"help error: {e!r}")
        await ctx.send("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")

# ====== AUTO REFRESH DAEMON (configurable) ======
def _refresh_period_tag(now_local: datetime, freq: str) -> str:
    if freq == "YEARLY":
        return f"[AGE-REFRESH] {now_local.year}"
    if freq == "MONTHLY":
        return f"[AGE-REFRESH] {now_local.year}-{now_local.month:02d}"
    if freq == "WEEKLY":
        iso = now_local.isocalendar()
        return f"[AGE-REFRESH] {iso.year}-W{iso.week:02d}"
    if freq == "DAILY":
        return f"[AGE-REFRESH] {now_local.date().isoformat()}"
    return f"[AGE-REFRESH] {now_local.year}-{now_local.month:02d}"

async def _already_ran_this_period(log_ch: discord.TextChannel, tz: timezone, freq: str) -> bool:
    now = datetime.now(tz)
    tag = _refresh_period_tag(now, freq)
    try:
        async for m in log_ch.history(limit=200):
            if m.author == bot.user and m.content and tag in m.content:
                return True
    except Exception:
        pass
    return False

def _last_day_of_month(year: int, month: int) -> int:
    if month == 12:
        n = datetime(year+1, 1, 1)
    else:
        n = datetime(year, month+1, 1)
    return (n - timedelta(days=1)).day

def _compute_next_run_local(now_local: datetime) -> datetime:
    freq = REFRESH_FREQUENCY.upper()
    h, mi = REFRESH_AT_HOUR, REFRESH_AT_MINUTE

    if freq == "YEARLY":
        y = now_local.year
        m = max(1, min(12, REFRESH_AT_MONTH))
        dmax = _last_day_of_month(y, m)
        d = max(1, min(dmax, REFRESH_AT_DAY))
        target = datetime(y, m, d, h, mi, 0, tzinfo=REFRESH_TZ)
        if now_local >= target:
            y += 1
            dmax = _last_day_of_month(y, m)
            d = max(1, min(dmax, REFRESH_AT_DAY))
            target = datetime(y, m, d, h, mi, 0, tzinfo=REFRESH_TZ)
        return target

    if freq == "MONTHLY":
        y, m = now_local.year, now_local.month
        dmax = _last_day_of_month(y, m)
        d = max(1, min(dmax, REFRESH_AT_DAY))
        target = datetime(y, m, d, h, mi, 0, tzinfo=REFRESH_TZ)
        if now_local >= target:
            if m == 12:
                y += 1; m = 1
            else:
                m += 1
            dmax = _last_day_of_month(y, m)
            d = max(1, min(dmax, REFRESH_AT_DAY))
            target = datetime(y, m, d, h, mi, 0, tzinfo=REFRESH_TZ)
        return target

    if freq == "WEEKLY":
        weekday = max(0, min(6, REFRESH_AT_WEEKDAY))
        days_ahead = (weekday - now_local.weekday()) % 7
        target = (now_local + timedelta(days=days_ahead)).replace(hour=h, minute=mi, second=0, microsecond=0)
        if now_local >= target:
            target = target + timedelta(days=7)
        return target

    # DAILY
    target = now_local.replace(hour=h, minute=mi, second=0, microsecond=0)
    if now_local >= target:
        target = target + timedelta(days=1)
    return target

async def _auto_refresh_daemon():
    if not AUTO_REFRESH_ENABLED:
        return
    tz = REFRESH_TZ
    await bot.wait_until_ready()
    while not bot.is_closed():
        now_utc = datetime.now(timezone.utc)
        now_local = now_utc.astimezone(tz)
        target_local = _compute_next_run_local(now_local)
        target_utc = target_local.astimezone(timezone.utc)
        sleep_sec = max(1, int((target_utc - now_utc).total_seconds()))
        try:
            await asyncio.sleep(sleep_sec)
        except asyncio.CancelledError:
            return

        try:
            for guild in bot.guilds:
                log_ch = guild.get_channel(LOG_CHANNEL_ID)
                if not log_ch:
                    continue
                if await _already_ran_this_period(log_ch, tz, REFRESH_FREQUENCY):
                    continue
                await _run_full_age_refresh(guild)
                await log_ch.send(_refresh_period_tag(datetime.now(tz), REFRESH_FREQUENCY) + " ‚úÖ DONE")
        except Exception:
            # ‡∏Å‡∏±‡∏ô daemon ‡∏•‡πâ‡∏°
            pass

# ====== Persistent View Loader ======
@bot.event
async def on_ready():
    print(f"‚úÖ Logged in as {bot.user}")
    bot.add_view(VerificationView())
    if AUTO_REFRESH_ENABLED and not getattr(bot, "_age_refresh_daemon_started", False):
        bot.loop.create_task(_auto_refresh_daemon())
        bot._age_refresh_daemon_started = True

# ====== Run bot ======
bot.run(os.getenv("DISCORD_BOT_TOKEN"))
